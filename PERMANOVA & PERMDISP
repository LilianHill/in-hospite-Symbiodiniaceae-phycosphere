#Se esses pacotes não estiverem instalados, lembrar de instalar:
library(vegan)
library(tidyverse)
library(cluster)

#tirar colunas de fatores e sample names (deixar só os dados de OTU)
dist = CamiMeta[ , -c(1:2)]




#Criar tabela de similaridade só com os dados de OTU (Bray-Curtis)
distbray = vegdist(dist, method="bray", binary=FALSE, diag=FALSE, upper=FALSE,
                   na.rm = TRUE)

# Convert abundance data to binary presence/absence data
binary_data <- apply(dist, 2, function(x) ifelse(x > 0.5, 1, 0))

write.csv(binary_data, "binary.csv")



#Tabela de similaridade Sorensen

distsor = vegdist(binary_data, method="bray", binary=FALSE, diag=FALSE, upper=FALSE,
                  na.rm = TRUE)


#fazer permanova (Bray)
permanova <- adonis2(distbray~Fraction, data = CamiMeta)
view(permanova)

#fazer permanova (Sorensen)
permanova <- adonis2(distsor~Fraction, data = CamiMeta, method = "sorensen")


#Teste Pairwise
#Primeiro, criar a função:
pairwise.adonis <- function(x,factors, sim.function = 'vegdist', sim.method = 'bray', p.adjust.m ='bonferroni')
{
  library(vegan)
  
  co = combn(unique(as.character(factors)),2)
  pairs = c()
  F.Model =c()
  R2 = c()
  p.value = c()
  
  
  for(elem in 1:ncol(co)){
    if(sim.function == 'daisy'){
      library(cluster); x1 = daisy(x[factors %in% c(co[1,elem],co[2,elem]),],metric=sim.method)
    } else{x1 = vegdist(x[factors %in% c(co[1,elem],co[2,elem]),],method=sim.method)}
    
    ad = adonis(x1 ~ factors[factors %in% c(co[1,elem],co[2,elem])] );
    pairs = c(pairs,paste(co[1,elem],'vs',co[2,elem]));
    F.Model =c(F.Model,ad$aov.tab[1,4]);
    R2 = c(R2,ad$aov.tab[1,5]);
    p.value = c(p.value,ad$aov.tab[1,6])
  }
  p.adjusted = p.adjust(p.value,method=p.adjust.m)
  sig = c(rep('',length(p.adjusted)))
  sig[p.adjusted <= 0.05] <-'.'
  sig[p.adjusted <= 0.01] <-'*'
  sig[p.adjusted <= 0.001] <-'**'
  sig[p.adjusted <= 0.0001] <-'***'
  
  pairw.res = data.frame(pairs,F.Model,R2,p.value,p.adjusted,sig)
  print("Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1")
  return(pairw.res)
  
} 


#Então, correr os testes Pairwise para cada fator:
pairwise.adonis(dist,CamiMeta$Fraction)

pairwise.adonis(binary_data,CamiMeta$Fraction)

#pairwise sorensen
pairwise <- pairwise.adonis(binary_data~Fraction, data = CamiMeta, method = "sorensen")


install.packages("vegan", dependencies = TRUE)
install.packages("vegan")
library(vegan)


#PermDisp (bray)
diss = vegdist(distbray, "bray") #usar a matriz de similaridade feita anteriormente "distbray"
(perm = betadisper(diss, group = CamiMeta$Fraction))
plot(perm)
anova(perm)
TukeyHSD(perm)


#PermDisp (sorensen)
dissor = vegdist(binary_data, "bray") #usar a matriz de similaridade de presença/ausencia feita anteriormente 
(perm = betadisper(dissor, group = CamiMeta$Fraction))
plot(perm)
anova(perm)
TukeyHSD(perm)
